// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_generator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_generator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_generator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_generator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_generator_2eproto;
namespace Proto {
class Batch;
class BatchDefaultTypeInternal;
extern BatchDefaultTypeInternal _Batch_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Game;
class GameDefaultTypeInternal;
extern GameDefaultTypeInternal _Game_default_instance_;
class LastUpdate;
class LastUpdateDefaultTypeInternal;
extern LastUpdateDefaultTypeInternal _LastUpdate_default_instance_;
class Network;
class NetworkDefaultTypeInternal;
extern NetworkDefaultTypeInternal _Network_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Sample;
class SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class TrainData;
class TrainDataDefaultTypeInternal;
extern TrainDataDefaultTypeInternal _TrainData_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::Batch* Arena::CreateMaybeMessage<::Proto::Batch>(Arena*);
template<> ::Proto::Empty* Arena::CreateMaybeMessage<::Proto::Empty>(Arena*);
template<> ::Proto::Game* Arena::CreateMaybeMessage<::Proto::Game>(Arena*);
template<> ::Proto::LastUpdate* Arena::CreateMaybeMessage<::Proto::LastUpdate>(Arena*);
template<> ::Proto::Network* Arena::CreateMaybeMessage<::Proto::Network>(Arena*);
template<> ::Proto::Response* Arena::CreateMaybeMessage<::Proto::Response>(Arena*);
template<> ::Proto::Sample* Arena::CreateMaybeMessage<::Proto::Sample>(Arena*);
template<> ::Proto::TrainData* Arena::CreateMaybeMessage<::Proto::TrainData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum Result : int {
  UNDEFINED = 0,
  WHITE_WIN = 1,
  BLACK_WIN = 2,
  DRAW = 3,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Result_IsValid(int value);
constexpr Result Result_MIN = UNDEFINED;
constexpr Result Result_MAX = DRAW;
constexpr int Result_ARRAYSIZE = Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor();
template<typename T>
inline const std::string& Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Result_descriptor(), enum_t_value);
}
inline bool Result_Parse(
    const std::string& name, Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Result>(
    Result_descriptor(), name, value);
}
enum Color : int {
  NO_COLOR = 0,
  WHITE = 1,
  BLACK = 2,
  Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = NO_COLOR;
constexpr Color Color_MAX = BLACK;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    const std::string& name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
// ===================================================================

class Sample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Sample) */ {
 public:
  inline Sample() : Sample(nullptr) {};
  virtual ~Sample();

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(Sample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sample* New() const final {
    return CreateMaybeMessage<Sample>(nullptr);
  }

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Sample";
  }
  protected:
  explicit Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generator_2eproto);
    return ::descriptor_table_generator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWPFieldNumber = 1,
    kBPFieldNumber = 2,
    kKFieldNumber = 3,
    kMoverFieldNumber = 4,
    kResultFieldNumber = 5,
  };
  // uint32 WP = 1;
  void clear_wp();
  ::PROTOBUF_NAMESPACE_ID::uint32 wp() const;
  void set_wp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wp() const;
  void _internal_set_wp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 BP = 2;
  void clear_bp();
  ::PROTOBUF_NAMESPACE_ID::uint32 bp() const;
  void set_bp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bp() const;
  void _internal_set_bp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 K = 3;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::uint32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Proto.Color mover = 4;
  void clear_mover();
  ::Proto::Color mover() const;
  void set_mover(::Proto::Color value);
  private:
  ::Proto::Color _internal_mover() const;
  void _internal_set_mover(::Proto::Color value);
  public:

  // .Proto.Result result = 5;
  void clear_result();
  ::Proto::Result result() const;
  void set_result(::Proto::Result value);
  private:
  ::Proto::Result _internal_result() const;
  void _internal_set_result(::Proto::Result value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 k_;
  int mover_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generator_2eproto;
};
// -------------------------------------------------------------------

class TrainData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TrainData) */ {
 public:
  inline TrainData() : TrainData(nullptr) {};
  virtual ~TrainData();

  TrainData(const TrainData& from);
  TrainData(TrainData&& from) noexcept
    : TrainData() {
    *this = ::std::move(from);
  }

  inline TrainData& operator=(const TrainData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainData& operator=(TrainData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainData* internal_default_instance() {
    return reinterpret_cast<const TrainData*>(
               &_TrainData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrainData& a, TrainData& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainData* New() const final {
    return CreateMaybeMessage<TrainData>(nullptr);
  }

  TrainData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainData& from);
  void MergeFrom(const TrainData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TrainData";
  }
  protected:
  explicit TrainData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generator_2eproto);
    return ::descriptor_table_generator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 1,
  };
  // repeated .Proto.Sample samples = 1;
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  ::Proto::Sample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Sample >*
      mutable_samples();
  private:
  const ::Proto::Sample& _internal_samples(int index) const;
  ::Proto::Sample* _internal_add_samples();
  public:
  const ::Proto::Sample& samples(int index) const;
  ::Proto::Sample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Sample >&
      samples() const;

  // @@protoc_insertion_point(class_scope:Proto.TrainData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Sample > samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generator_2eproto;
};
// -------------------------------------------------------------------

class Network PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Network) */ {
 public:
  inline Network() : Network(nullptr) {};
  virtual ~Network();

  Network(const Network& from);
  Network(Network&& from) noexcept
    : Network() {
    *this = ::std::move(from);
  }

  inline Network& operator=(const Network& from) {
    CopyFrom(from);
    return *this;
  }
  inline Network& operator=(Network&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Network& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Network* internal_default_instance() {
    return reinterpret_cast<const Network*>(
               &_Network_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Network& a, Network& b) {
    a.Swap(&b);
  }
  inline void Swap(Network* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Network* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Network* New() const final {
    return CreateMaybeMessage<Network>(nullptr);
  }

  Network* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Network>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Network& from);
  void MergeFrom(const Network& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Network* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Network";
  }
  protected:
  explicit Network(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generator_2eproto);
    return ::descriptor_table_generator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:Proto.Network)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generator_2eproto;
};
// -------------------------------------------------------------------

class Game PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Game) */ {
 public:
  inline Game() : Game(nullptr) {};
  virtual ~Game();

  Game(const Game& from);
  Game(Game&& from) noexcept
    : Game() {
    *this = ::std::move(from);
  }

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game& operator=(Game&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Game& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Game* internal_default_instance() {
    return reinterpret_cast<const Game*>(
               &_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Game& a, Game& b) {
    a.Swap(&b);
  }
  inline void Swap(Game* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Game* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Game* New() const final {
    return CreateMaybeMessage<Game>(nullptr);
  }

  Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Game>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Game";
  }
  protected:
  explicit Game(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generator_2eproto);
    return ::descriptor_table_generator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveIndicesFieldNumber = 2,
    kStartPositionFieldNumber = 1,
  };
  // repeated int32 move_indices = 2;
  int move_indices_size() const;
  private:
  int _internal_move_indices_size() const;
  public:
  void clear_move_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_move_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_move_indices() const;
  void _internal_add_move_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_move_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 move_indices(int index) const;
  void set_move_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_move_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      move_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_move_indices();

  // string start_position = 1;
  void clear_start_position();
  const std::string& start_position() const;
  void set_start_position(const std::string& value);
  void set_start_position(std::string&& value);
  void set_start_position(const char* value);
  void set_start_position(const char* value, size_t size);
  std::string* mutable_start_position();
  std::string* release_start_position();
  void set_allocated_start_position(std::string* start_position);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start_position();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_position(
      std::string* start_position);
  private:
  const std::string& _internal_start_position() const;
  void _internal_set_start_position(const std::string& value);
  std::string* _internal_mutable_start_position();
  public:

  // @@protoc_insertion_point(class_scope:Proto.Game)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > move_indices_;
  mutable std::atomic<int> _move_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generator_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generator_2eproto);
    return ::descriptor_table_generator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:Proto.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generator_2eproto;
};
// -------------------------------------------------------------------

class Batch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Batch) */ {
 public:
  inline Batch() : Batch(nullptr) {};
  virtual ~Batch();

  Batch(const Batch& from);
  Batch(Batch&& from) noexcept
    : Batch() {
    *this = ::std::move(from);
  }

  inline Batch& operator=(const Batch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Batch& operator=(Batch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Batch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Batch* internal_default_instance() {
    return reinterpret_cast<const Batch*>(
               &_Batch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Batch& a, Batch& b) {
    a.Swap(&b);
  }
  inline void Swap(Batch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Batch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Batch* New() const final {
    return CreateMaybeMessage<Batch>(nullptr);
  }

  Batch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Batch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Batch& from);
  void MergeFrom(const Batch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Batch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Batch";
  }
  protected:
  explicit Batch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generator_2eproto);
    return ::descriptor_table_generator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 1,
  };
  // repeated .Proto.Game games = 1;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::Proto::Game* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Game >*
      mutable_games();
  private:
  const ::Proto::Game& _internal_games(int index) const;
  ::Proto::Game* _internal_add_games();
  public:
  const ::Proto::Game& games(int index) const;
  ::Proto::Game* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:Proto.Batch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Game > games_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generator_2eproto;
};
// -------------------------------------------------------------------

class LastUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LastUpdate) */ {
 public:
  inline LastUpdate() : LastUpdate(nullptr) {};
  virtual ~LastUpdate();

  LastUpdate(const LastUpdate& from);
  LastUpdate(LastUpdate&& from) noexcept
    : LastUpdate() {
    *this = ::std::move(from);
  }

  inline LastUpdate& operator=(const LastUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastUpdate& operator=(LastUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastUpdate* internal_default_instance() {
    return reinterpret_cast<const LastUpdate*>(
               &_LastUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LastUpdate& a, LastUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(LastUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastUpdate* New() const final {
    return CreateMaybeMessage<LastUpdate>(nullptr);
  }

  LastUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastUpdate& from);
  void MergeFrom(const LastUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LastUpdate";
  }
  protected:
  explicit LastUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generator_2eproto);
    return ::descriptor_table_generator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int32 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.LastUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generator_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {};
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generator_2eproto);
    return ::descriptor_table_generator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sample

// uint32 WP = 1;
inline void Sample::clear_wp() {
  wp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::_internal_wp() const {
  return wp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::wp() const {
  // @@protoc_insertion_point(field_get:Proto.Sample.WP)
  return _internal_wp();
}
inline void Sample::_internal_set_wp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wp_ = value;
}
inline void Sample::set_wp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wp(value);
  // @@protoc_insertion_point(field_set:Proto.Sample.WP)
}

// uint32 BP = 2;
inline void Sample::clear_bp() {
  bp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::_internal_bp() const {
  return bp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::bp() const {
  // @@protoc_insertion_point(field_get:Proto.Sample.BP)
  return _internal_bp();
}
inline void Sample::_internal_set_bp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bp_ = value;
}
inline void Sample::set_bp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bp(value);
  // @@protoc_insertion_point(field_set:Proto.Sample.BP)
}

// uint32 K = 3;
inline void Sample::clear_k() {
  k_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sample::k() const {
  // @@protoc_insertion_point(field_get:Proto.Sample.K)
  return _internal_k();
}
inline void Sample::_internal_set_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  k_ = value;
}
inline void Sample::set_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:Proto.Sample.K)
}

// .Proto.Color mover = 4;
inline void Sample::clear_mover() {
  mover_ = 0;
}
inline ::Proto::Color Sample::_internal_mover() const {
  return static_cast< ::Proto::Color >(mover_);
}
inline ::Proto::Color Sample::mover() const {
  // @@protoc_insertion_point(field_get:Proto.Sample.mover)
  return _internal_mover();
}
inline void Sample::_internal_set_mover(::Proto::Color value) {
  
  mover_ = value;
}
inline void Sample::set_mover(::Proto::Color value) {
  _internal_set_mover(value);
  // @@protoc_insertion_point(field_set:Proto.Sample.mover)
}

// .Proto.Result result = 5;
inline void Sample::clear_result() {
  result_ = 0;
}
inline ::Proto::Result Sample::_internal_result() const {
  return static_cast< ::Proto::Result >(result_);
}
inline ::Proto::Result Sample::result() const {
  // @@protoc_insertion_point(field_get:Proto.Sample.result)
  return _internal_result();
}
inline void Sample::_internal_set_result(::Proto::Result value) {
  
  result_ = value;
}
inline void Sample::set_result(::Proto::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Proto.Sample.result)
}

// -------------------------------------------------------------------

// TrainData

// repeated .Proto.Sample samples = 1;
inline int TrainData::_internal_samples_size() const {
  return samples_.size();
}
inline int TrainData::samples_size() const {
  return _internal_samples_size();
}
inline void TrainData::clear_samples() {
  samples_.Clear();
}
inline ::Proto::Sample* TrainData::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TrainData.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Sample >*
TrainData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TrainData.samples)
  return &samples_;
}
inline const ::Proto::Sample& TrainData::_internal_samples(int index) const {
  return samples_.Get(index);
}
inline const ::Proto::Sample& TrainData::samples(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TrainData.samples)
  return _internal_samples(index);
}
inline ::Proto::Sample* TrainData::_internal_add_samples() {
  return samples_.Add();
}
inline ::Proto::Sample* TrainData::add_samples() {
  // @@protoc_insertion_point(field_add:Proto.TrainData.samples)
  return _internal_add_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Sample >&
TrainData::samples() const {
  // @@protoc_insertion_point(field_list:Proto.TrainData.samples)
  return samples_;
}

// -------------------------------------------------------------------

// Network

// bytes data = 1;
inline void Network::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Network::data() const {
  // @@protoc_insertion_point(field_get:Proto.Network.data)
  return _internal_data();
}
inline void Network::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Proto.Network.data)
}
inline std::string* Network::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Proto.Network.data)
  return _internal_mutable_data();
}
inline const std::string& Network::_internal_data() const {
  return data_.Get();
}
inline void Network::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Network::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Network.data)
}
inline void Network::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Network.data)
}
inline void Network::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Network.data)
}
inline std::string* Network::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Network::release_data() {
  // @@protoc_insertion_point(field_release:Proto.Network.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Network::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Network.data)
}
inline std::string* Network::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto.Network.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Network::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Network.data)
}

// -------------------------------------------------------------------

// Game

// string start_position = 1;
inline void Game::clear_start_position() {
  start_position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Game::start_position() const {
  // @@protoc_insertion_point(field_get:Proto.Game.start_position)
  return _internal_start_position();
}
inline void Game::set_start_position(const std::string& value) {
  _internal_set_start_position(value);
  // @@protoc_insertion_point(field_set:Proto.Game.start_position)
}
inline std::string* Game::mutable_start_position() {
  // @@protoc_insertion_point(field_mutable:Proto.Game.start_position)
  return _internal_mutable_start_position();
}
inline const std::string& Game::_internal_start_position() const {
  return start_position_.Get();
}
inline void Game::_internal_set_start_position(const std::string& value) {
  
  start_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Game::set_start_position(std::string&& value) {
  
  start_position_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Game.start_position)
}
inline void Game::set_start_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Game.start_position)
}
inline void Game::set_start_position(const char* value,
    size_t size) {
  
  start_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Game.start_position)
}
inline std::string* Game::_internal_mutable_start_position() {
  
  return start_position_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Game::release_start_position() {
  // @@protoc_insertion_point(field_release:Proto.Game.start_position)
  return start_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Game::set_allocated_start_position(std::string* start_position) {
  if (start_position != nullptr) {
    
  } else {
    
  }
  start_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Game.start_position)
}
inline std::string* Game::unsafe_arena_release_start_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto.Game.start_position)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_position_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Game::unsafe_arena_set_allocated_start_position(
    std::string* start_position) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_position != nullptr) {
    
  } else {
    
  }
  start_position_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_position, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Game.start_position)
}

// repeated int32 move_indices = 2;
inline int Game::_internal_move_indices_size() const {
  return move_indices_.size();
}
inline int Game::move_indices_size() const {
  return _internal_move_indices_size();
}
inline void Game::clear_move_indices() {
  move_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Game::_internal_move_indices(int index) const {
  return move_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Game::move_indices(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Game.move_indices)
  return _internal_move_indices(index);
}
inline void Game::set_move_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  move_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.Game.move_indices)
}
inline void Game::_internal_add_move_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  move_indices_.Add(value);
}
inline void Game::add_move_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_move_indices(value);
  // @@protoc_insertion_point(field_add:Proto.Game.move_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Game::_internal_move_indices() const {
  return move_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Game::move_indices() const {
  // @@protoc_insertion_point(field_list:Proto.Game.move_indices)
  return _internal_move_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Game::_internal_mutable_move_indices() {
  return &move_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Game::mutable_move_indices() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Game.move_indices)
  return _internal_mutable_move_indices();
}

// -------------------------------------------------------------------

// Response

// string message = 1;
inline void Response::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:Proto.Response.message)
  return _internal_message();
}
inline void Response::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Proto.Response.message)
}
inline std::string* Response::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Proto.Response.message)
  return _internal_mutable_message();
}
inline const std::string& Response::_internal_message() const {
  return message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto.Response.message)
}
inline void Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto.Response.message)
}
inline void Response::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto.Response.message)
}
inline std::string* Response::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:Proto.Response.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto.Response.message)
}
inline std::string* Response::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto.Response.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Response.message)
}

// -------------------------------------------------------------------

// Batch

// repeated .Proto.Game games = 1;
inline int Batch::_internal_games_size() const {
  return games_.size();
}
inline int Batch::games_size() const {
  return _internal_games_size();
}
inline void Batch::clear_games() {
  games_.Clear();
}
inline ::Proto::Game* Batch::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Batch.games)
  return games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Game >*
Batch::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Batch.games)
  return &games_;
}
inline const ::Proto::Game& Batch::_internal_games(int index) const {
  return games_.Get(index);
}
inline const ::Proto::Game& Batch::games(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Batch.games)
  return _internal_games(index);
}
inline ::Proto::Game* Batch::_internal_add_games() {
  return games_.Add();
}
inline ::Proto::Game* Batch::add_games() {
  // @@protoc_insertion_point(field_add:Proto.Batch.games)
  return _internal_add_games();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Game >&
Batch::games() const {
  // @@protoc_insertion_point(field_list:Proto.Batch.games)
  return games_;
}

// -------------------------------------------------------------------

// LastUpdate

// int32 timestamp = 1;
inline void LastUpdate::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LastUpdate::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LastUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:Proto.LastUpdate.timestamp)
  return _internal_timestamp();
}
inline void LastUpdate::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void LastUpdate::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Proto.LastUpdate.timestamp)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::Result>() {
  return ::Proto::Result_descriptor();
}
template <> struct is_proto_enum< ::Proto::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::Color>() {
  return ::Proto::Color_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_generator_2eproto
